// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CalcTest.proto

package CalcTest

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CalcRequest struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Num1                 int32    `protobuf:"varint,2,opt,name=num1,proto3" json:"num1,omitempty"`
	Num2                 int32    `protobuf:"varint,3,opt,name=num2,proto3" json:"num2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalcRequest) Reset()         { *m = CalcRequest{} }
func (m *CalcRequest) String() string { return proto.CompactTextString(m) }
func (*CalcRequest) ProtoMessage()    {}
func (*CalcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71c354225e43bd6e, []int{0}
}

func (m *CalcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalcRequest.Unmarshal(m, b)
}
func (m *CalcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalcRequest.Marshal(b, m, deterministic)
}
func (m *CalcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalcRequest.Merge(m, src)
}
func (m *CalcRequest) XXX_Size() int {
	return xxx_messageInfo_CalcRequest.Size(m)
}
func (m *CalcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalcRequest proto.InternalMessageInfo

func (m *CalcRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CalcRequest) GetNum1() int32 {
	if m != nil {
		return m.Num1
	}
	return 0
}

func (m *CalcRequest) GetNum2() int32 {
	if m != nil {
		return m.Num2
	}
	return 0
}

type CalcReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalcReply) Reset()         { *m = CalcReply{} }
func (m *CalcReply) String() string { return proto.CompactTextString(m) }
func (*CalcReply) ProtoMessage()    {}
func (*CalcReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_71c354225e43bd6e, []int{1}
}

func (m *CalcReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalcReply.Unmarshal(m, b)
}
func (m *CalcReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalcReply.Marshal(b, m, deterministic)
}
func (m *CalcReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalcReply.Merge(m, src)
}
func (m *CalcReply) XXX_Size() int {
	return xxx_messageInfo_CalcReply.Size(m)
}
func (m *CalcReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CalcReply.DiscardUnknown(m)
}

var xxx_messageInfo_CalcReply proto.InternalMessageInfo

func (m *CalcReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*CalcRequest)(nil), "CalcTest.CalcRequest")
	proto.RegisterType((*CalcReply)(nil), "CalcTest.CalcReply")
}

func init() { proto.RegisterFile("CalcTest.proto", fileDescriptor_71c354225e43bd6e) }

var fileDescriptor_71c354225e43bd6e = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xdf, 0x8a, 0xd4, 0x30,
	0x14, 0xc6, 0xe9, 0xf8, 0x77, 0x2b, 0x88, 0x54, 0x16, 0x86, 0x2a, 0x78, 0x1c, 0x10, 0x16, 0xb1,
	0x13, 0x76, 0xbc, 0xdb, 0xbb, 0x55, 0x56, 0xf0, 0x4a, 0x1c, 0xf7, 0x05, 0xd2, 0xf4, 0x4c, 0x12,
	0x48, 0x73, 0x62, 0x73, 0x32, 0x63, 0x6f, 0x7d, 0x04, 0x7d, 0x04, 0x1f, 0xc3, 0x0b, 0x1f, 0xc2,
	0x57, 0xf0, 0x41, 0xa4, 0xed, 0xcc, 0x32, 0xe8, 0x55, 0xbe, 0xdf, 0xc7, 0xc7, 0x97, 0xe4, 0x9c,
	0xfc, 0xe1, 0x5b, 0xe9, 0xd4, 0x35, 0x46, 0x5e, 0x86, 0x8e, 0x98, 0x8a, 0xfb, 0x07, 0x2e, 0x9f,
	0x6a, 0x22, 0xed, 0x50, 0xc8, 0x60, 0x85, 0xf4, 0x9e, 0x58, 0xb2, 0x25, 0x1f, 0xa7, 0x5c, 0xf9,
	0x6a, 0x3c, 0x54, 0xa5, 0xd1, 0x57, 0x71, 0x27, 0xb5, 0xc6, 0x4e, 0x50, 0x18, 0x13, 0xff, 0xa7,
	0x17, 0xef, 0xf3, 0x07, 0x43, 0xef, 0x1a, 0x3f, 0x27, 0x8c, 0x5c, 0x14, 0xf9, 0x6d, 0xee, 0x03,
	0xce, 0x33, 0xc8, 0xce, 0x4e, 0xd6, 0xa3, 0x1e, 0x3c, 0x9f, 0xda, 0xf3, 0xf9, 0x0c, 0xb2, 0xb3,
	0x3b, 0xeb, 0x51, 0xef, 0xbd, 0xd5, 0xfc, 0xd6, 0x8d, 0xb7, 0x5a, 0xbc, 0xc8, 0x4f, 0xa6, 0xaa,
	0xe0, 0xfa, 0x62, 0x9e, 0xdf, 0x6b, 0x31, 0x46, 0xa9, 0x0f, 0x5d, 0x07, 0x5c, 0xfd, 0x98, 0x4d,
	0xb9, 0xe4, 0x24, 0x63, 0x71, 0x7d, 0x0c, 0xa7, 0xcb, 0x9b, 0x3f, 0x1f, 0x3d, 0xaa, 0x7c, 0xfc,
	0xaf, 0x1d, 0x5c, 0xbf, 0x78, 0xf2, 0xf5, 0xf7, 0x9f, 0xef, 0xb3, 0xd3, 0xc5, 0x23, 0xb1, 0x3d,
	0x17, 0xf8, 0x45, 0xb6, 0xc1, 0xa1, 0x40, 0x65, 0xe8, 0x22, 0x7b, 0x59, 0xfe, 0xca, 0xbe, 0x5d,
	0xfe, 0xcc, 0x8a, 0xcd, 0xe5, 0x1b, 0xcb, 0x1f, 0x36, 0x57, 0x5b, 0xec, 0x7a, 0x36, 0xd6, 0xeb,
	0x4f, 0xd8, 0x6d, 0xad, 0x42, 0x68, 0x30, 0xaa, 0xce, 0x8e, 0x43, 0x81, 0xaa, 0x82, 0x9d, 0xb1,
	0xca, 0x40, 0x34, 0x94, 0x5c, 0x03, 0x9e, 0x18, 0x6a, 0x84, 0x14, 0xb1, 0x01, 0xeb, 0x21, 0x38,
	0xa9, 0x10, 0x68, 0x03, 0x6c, 0x10, 0x1a, 0x52, 0xa9, 0x45, 0x3f, 0x8d, 0x10, 0x14, 0xb5, 0x03,
	0x3c, 0x2f, 0x3f, 0xe6, 0xcf, 0xde, 0x59, 0xdf, 0x00, 0x25, 0x86, 0x96, 0x3a, 0x04, 0x59, 0x0f,
	0xf2, 0x4a, 0x19, 0xda, 0xdf, 0x58, 0x2c, 0x0d, 0x73, 0x88, 0x17, 0x42, 0x68, 0xcb, 0x26, 0xd5,
	0x4b, 0x45, 0xad, 0xd0, 0x5d, 0x50, 0x15, 0x2a, 0x8a, 0x7d, 0x64, 0xdc, 0xa3, 0x96, 0x8c, 0x3b,
	0xd9, 0xd7, 0x77, 0xc7, 0xf5, 0xbc, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xb3, 0x74, 0x16,
	0x06, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculateClient is the client API for Calculate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculateClient interface {
	Calculate(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcReply, error)
}

type calculateClient struct {
	cc *grpc.ClientConn
}

func NewCalculateClient(cc *grpc.ClientConn) CalculateClient {
	return &calculateClient{cc}
}

func (c *calculateClient) Calculate(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcReply, error) {
	out := new(CalcReply)
	err := c.cc.Invoke(ctx, "/CalcTest.Calculate/Calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculateServer is the server API for Calculate service.
type CalculateServer interface {
	Calculate(context.Context, *CalcRequest) (*CalcReply, error)
}

// UnimplementedCalculateServer can be embedded to have forward compatible implementations.
type UnimplementedCalculateServer struct {
}

func (*UnimplementedCalculateServer) Calculate(ctx context.Context, req *CalcRequest) (*CalcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}

func RegisterCalculateServer(s *grpc.Server, srv CalculateServer) {
	s.RegisterService(&_Calculate_serviceDesc, srv)
}

func _Calculate_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CalcTest.Calculate/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateServer).Calculate(ctx, req.(*CalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CalcTest.Calculate",
	HandlerType: (*CalculateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculate",
			Handler:    _Calculate_Calculate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CalcTest.proto",
}
